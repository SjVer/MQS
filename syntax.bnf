script			: (top_level)*

top_level		: apply
				| section
				| declaration

apply			: '#' (('/' | '~' | '.') '/')? (IDENT '/')* IDENT
section			: IDENT '{' (top_level)* '}'

declaration		: variable_decl
				| function_decl
				| theorem_decl
				| conclusion_decl
				| question_decl

variable_decl	: '$' IDENT ':=' expression
function_decl	: '@' IDENT parameters annonation? ':=' expression
theorem_decl	: '!' IDENT parameters? ':=' expression ':=' expression
conclusion_decl	: '&' IDENT parameters? ('t' | 'f') ':=' theory
question_decl	: '?' IDENT? parameters? ':=' theory

parameters		: '(' (IDENT annonation? (',' IDENT annonation?)*)? ')'
annonation		: ':' TYPE

theory			: or
or				: xor ('|' xor)*
xor				: and ('!|' and)*
and				: solveable ('&' solveable)*
solveable		: match | comparison | divisible | exists
match			: atom ('<>' | '<!') atom
comparison		: atom ('==' | '!=' | '~' | '>' | '>=' | '<' | '<=') atom
divisible		: atom '%' atom
exists			: atom '??'
atom			: '(' theory ')' | expression

expression		: equality
equality		: term (('=' | '/=') term)*
term			: factor (('-' | '+') factor)*
factor			: power (('/' | '*') power)*
power			: unary ('^' power)?
unary			: ('-') unary | primary
primary			: INTEGER | FLOAT
				| '(' expression ')'
				| variable | call | builtin_call

variable		: (IDENT '::')* IDENT
call			: (IDENT '::')* IDENT '(' (expression (',' expression)*)? ')'
builtin_call	: (IDENT '::')* IDENT expression