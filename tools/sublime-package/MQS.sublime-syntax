%YAML 1.2

---

name: MQS
file_extensions: [mqs]
fileTypes: [.mqs]
scope: source.mqs

variables:
  ident: '[A-Za-z_][A-Za-z_0-9]*''*'

  # numbers
  decimal: '\b[0-9_]+(?:\.[0-9_]*)?'
  binary: '\b0(?:b|B)(?:[0-1_]|(\S))+'
  octal: '\b0(?:c|C)(?:[0-7_]|(\S))+'
  hexadecimal: '\b0(?:x|X)(?:[0-9a-fA-F_]|(\S))+'
  number: '{{decimal}}|{{binary}}|{{octal}}|{{hexadecimal}}'

  type: nat|int|flt

  importsym: ~|\.|\/
  annpattern: (?:\s*(:)\s*(?:({{type}})|(\S*)))?
  declpattern: \s*(?:({{ident}})|(\S*))\s*

contexts:

  main:
    - include: comment
    - include: section
    - include: declaration
    - include: expression
    - include: invalid

  params:
    - match: \(
      scope: punctuation.section.parameters.begin.mqs
      push:
        - match: '({{ident}}){{annpattern}}'
          captures:
            1: variable.parameter.mqs
            2: punctuation.annonation.mqs
            3: storage.type.mqs
            4: invalid.illegal.mqs
        - match: \,
          scope: punctuation.separator.parameters.mqs
        - match: \)
          scope: punctuation.section.parameters.end.mqs
          pop: true
        - include: invalid

  # TOP LEVEL

  section:
    - match: '({{ident}})\s*(\{)'
      captures:
        1: entity.name.namespace.mqs
        2: punctuation.section.namespace.begin.mqs
      push:
        - include: comment
        - match: \}
          scope: punctuation.section.namespace.end.mqs
          pop: true
        - include: expression
        - include: declaration
        - include: invalid

 # DECLARATIONS

  declaration:
    - include: comment

    - include: import
    - include: theorem-decl
    - include: conclusion-decl
    - include: variable-decl
    - include: function-decl
    - include: question-decl

  import:
    - match: (#)\s*(?:({{importsym}})\s*(\/))?\s*(?:({{ident}})\s*(\/)\s*)*({{ident}})
      captures:
        1: keyword.control.import.mqs
        2: entity.name.function.mqs
        3: keyword.operator.path-separator.mqs
        4: entity.name.namespace.mqs
        5: keyword.operator.path-separator.mqs
        6: entity.name.namespace.mqs

  theorem-decl:
    - match: (!){{declpattern}}
      captures:
        1: keyword.declaration.theorem.mqs
        2: entity.name.function.theorem.mqs
        3: invalid.illegal.mqs
      push:
        - match: :=
          scope: keyword.definition.theorem.mqs
          pop: true
        - include: params
        - include: invalid

  conclusion-decl:
    - match: (&){{declpattern}}
      captures:
        1: keyword.declaration.conclusion.mqs
        2: entity.name.function.conclusion.mqs
        3: invalid.illegal.mqs
      push:
        - match: (?:(t|f)|(\S*))\s*(:=)
          captures:
            1: constant.language.bool.mqs
            2: invalid.illegal.mqs
            3: keyword.definition.conclusion.mqs
          pop: true
        - include: params
        - include: invalid


  variable-decl:
    - match: (\$){{declpattern}}(:=)
      captures:
        1: keyword.declaration.variable.mqs
        2: entity.name.function.variable.mqs
        3: invalid.illegal.mqs
        4: keyword.definition.variable.mqs

  function-decl:
    - match: (@){{declpattern}}
      captures:
        1: keyword.declaration.function.mqs
        2: entity.name.function.function.mqs
        3: invalid.illegal.mqs
      push:
      - match: '{{annpattern}}\s*(\:=)'
        captures:
          1: punctuation.annonation.mqs
          2: storage.type.mqs
          3: invalid.illegal.mqs
          4: keyword.definition.function.mqs
        pop: true
      - include: params
      - include: invalid

  question-decl:
    - match: (\?)(?!\?)\s*(?:({{ident}})\s*)?
      captures:
        1: keyword.declaration.question.mqs
        2: entity.name.function.question.mqs
      push:
        - match: :=
          scope: keyword.definition.question.mqs
          pop: true
        - include: params
        - include: invalid

  # EXPRESSION

  expression:
    - include: comment

    - include: operator
    - include: variable
    - include: number
    - include: variadic

  operator:
    # misc
    - match: :=
      scope: keyword.definition.mqs
    - match: ->
      scope: keyword.definition.rewrite.mqs

    # question
    - match: \||&|~
      scope: support.function.logical.mqs
    - match: <=>
      scope: support.function.implies.mqs
    - match: <!>
      scope: support.function.not-implies.mqs
    - match: \%
      scope: support.function.divisible.mqs
    - match: \?\?
      scope: support.function.exists.mqs
    - match: \=|/=|~=
      scope: support.function.comparison.mqs
    - match: <=|>=|<>|<|>
      scope: support.function.relational.mqs

    # normal
    - match: \*|/|-|\+|\^
      scope: keyword.operator.arithmetic.mqs
    - match: \(
      scope: punctuation.section.group.begin.mqs
      push:
        - match: \)
          scope: punctuation.section.group.end.mqs
          pop: true
        - include: expression
        - include: invalid

  variable:
    - match: (?:({{ident}})\s*(::)\s*)({{ident}})\s*(\()
      captures:
        1: entity.name.namespace.mqs
        2: keyword.operator.namespace.mqs
        3: entity.name.function.mqs
        4: punctuation.parentheses.arguments.start.mqs
      push:
        - include: comment
        - match: '\)'
          scope: punctuation.parentheses.arguments.start.mqs
          pop: true
        - match: \,
          scope: punctuation.sequence.arguments.mqs
        - include: expression
        - include: invalid

    - match: (?:({{ident}})\s*(::)\s*)*({{ident}})
      captures:
        1: entity.name.namespace.mqs
        2: keyword.operator.namespace.mqs
        3: variable.mqs

  number:
    - match: \b{{number}}
      captures:
        0: constant.numeric.mqs
        1: invalid.illegal.mqs

  variadic:
    - match: \.\.(?:{{number}})?
      scope: support.variadic.mqs

  # MISC

  comment:
    - match: '---'
      scope: punctuation.definition.comment.mqs
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.mqs
        - match: '---'
          pop: true

    - match: '--'
      scope: punctuation.definition.comment.mqs
      push:
        - meta_scope: comment.line.mqs
        - match: $\n?
          pop: true

  invalid:
    - scope: invalid.illegal.mqs
      match: '\S'
